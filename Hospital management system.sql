REM   Script: Hospital management system
REM   Hospital management system

CREATE TABLE HOSPITAL( 
HOSP_ID NUMBER PRIMARY KEY, 
HOSP_ADD VARCHAR(30), 
HOSP_NAME VARCHAR(30) 
);

CREATE TABLE DOCTOR( 
  DOC_ID NUMBER, 
  DOC_NAME VARCHAR(25), 
  DOC_SPEC VARCHAR(25), 
  DOC_NO NUMBER, 
  CONSTRAINT DOCTOR_PK PRIMARY KEY (DOC_ID) 
);

CREATE TABLE HOSPITAL_DOCTOR( 
HOSP_ID NUMBER, 
HOSP_DOC_ID NUMBER, 
CONSTRAINT HOSPITAL_FK FOREIGN KEY (HOSP_ID) REFERENCES HOSPITAL(HOSP_ID), 
CONSTRAINT HOSPITAL_DOCTOR_FK FOREIGN KEY (HOSP_DOC_ID) REFERENCES DOCTOR(DOC_ID) 
);

CREATE TABLE APPOINTMENT( 
 APP_ID NUMBER, 
APP_REASON VARCHAR(30),   
APP_NO NUMBER, 
APP_DATE DATE, 
CONSTRAINT APPOINTMENT_PK PRIMARY KEY(APP_ID) 
);

CREATE TABLE PATIENT( 
PAT_ID NUMBER, 
PAT_NAME VARCHAR(30), 
PAT_NO NUMBER, 
PAT_ADD VARCHAR(30), 
CONSTRAINT PATIENT_PK PRIMARY KEY (PAT_ID) 
);

CREATE TABLE APP_PAT_DOC 
( 
PAT_ID NUMBER, 
APP_ID NUMBER, 
DOC_ID NUMBER, 
CONSTRAINT APP_PAT_DOC_PK PRIMARY KEY(APP_ID, PAT_ID, DOC_ID), 
CONSTRAINT PAT_FK FOREIGN KEY (PAT_ID) REFERENCES PATIENT(PAT_ID), 
CONSTRAINT APP_FK FOREIGN KEY (APP_ID) REFERENCES APPOINTMENT(APP_ID), 
CONSTRAINT DOC_FK FOREIGN KEY (DOC_ID) REFERENCES DOCTOR(DOC_ID) 
);

CREATE TABLE RECEIPT( 
REC_ID NUMBER, 
REC_STATUS VARCHAR(30), 
CONSTRAINT RECEIPT_PK PRIMARY KEY (REC_ID) 
);

CREATE TABLE REC_PAT( 
REC_ID NUMBER, 
PAT_ID NUMBER, 
CONSTRAINT PAT_REC_FK FOREIGN KEY (PAT_ID) REFERENCES PATIENT(PAT_ID), 
CONSTRAINT REC_PAT_FK FOREIGN KEY (REC_ID) REFERENCES RECEIPT(REC_ID) 
);

CREATE TABLE PAYMENT( 
PAY_ID NUMBER PRIMARY KEY, 
PAT_METHOD VARCHAR(30), 
PAY_AMOUNT NUMBER, 
PAY_DATE DATE 
);

CREATE TABLE PAY_REC( 
PAY_ID NUMBER, 
REC_ID NUMBER, 
CONSTRAINT PAYMENT_REC_FK FOREIGN KEY(PAY_ID) REFERENCES PAYMENT(PAY_ID), 
CONSTRAINT RECEIPT_PAY_FK FOREIGN KEY(REC_ID) REFERENCES RECEIPT(REC_ID) 
);

CREATE OR REPLACE PROCEDURE INSERT_DOCTOR_RECORD ( 
  DOC_ID IN DOCTOR.DOC_ID%TYPE, 
  DOC_NAME IN DOCTOR.DOC_NAME%TYPE, 
  DOC_SPEC IN DOCTOR.DOC_SPEC%TYPE, 
  DOC_NO IN DOCTOR.DOC_NO%TYPE 
) 
AS 
BEGIN 
  INSERT INTO DOCTOR VALUES (DOC_ID, DOC_NAME,DOC_SPEC,DOC_NO); 
  COMMIT; 
END INSERT_DOCTOR_RECORD; 
/

BEGIN 
  INSERT_DOCTOR_RECORD(1, 'John Smith', 'Cardiology', 5551234); 
  INSERT_DOCTOR_RECORD(2, 'Jane Doe', 'Pediatrics', 5552345); 
  INSERT_DOCTOR_RECORD(3, 'Michael Johnson', 'Neurology', 5553456); 
  INSERT_DOCTOR_RECORD(4, 'Emily Lee', 'Oncology', 5554567); 
  INSERT_DOCTOR_RECORD(5, 'David Kim', 'Orthopedics', 5555678); 
  INSERT_DOCTOR_RECORD(6, 'Sarah Brown', 'Psychiatry', 5556789); 
  INSERT_DOCTOR_RECORD(7, 'Robert Garcia', 'Dermatology', 5557890); 
  INSERT_DOCTOR_RECORD(8, 'Maria Rodriguez', ' optometrist', 5558901); 
  INSERT_DOCTOR_RECORD(9, 'William Chen', 'Gastroenterology', 5559012); 
  INSERT_DOCTOR_RECORD(10, 'Jennifer Davis', 'Hematology', 5550123); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_HOSPITAL_RECORD ( 
  HOSP_ID IN HOSPITAL.HOSP_ID%TYPE, 
  HOSP_ADD IN HOSPITAL.HOSP_ADD%TYPE, 
  HOSP_NAME IN HOSPITAL.HOSP_NAME%TYPE 
) 
AS 
BEGIN 
  INSERT INTO HOSPITAL VALUES (HOSP_ID, HOSP_ADD, HOSP_NAME); 
  COMMIT; 
END INSERT_HOSPITAL_RECORD; 
 
/

BEGIN 
  INSERT_HOSPITAL_RECORD(1,'123 Main St', 'St. Mary Hospital'); 
  INSERT_HOSPITAL_RECORD(2,'456 Oak St', 'Memorial Hospital'); 
  INSERT_HOSPITAL_RECORD(3, '789 Maple St', 'City Hospital'); 
  INSERT_HOSPITAL_RECORD(4, '321 Elm St', 'General Hospital'); 
  INSERT_HOSPITAL_RECORD(5, '654 Pine St', 'Community Hospital'); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_HOSPITAL_DOCTOR ( 
  p_hosp_id IN HOSPITAL_DOCTOR.HOSP_ID%TYPE, 
  p_doc_id IN HOSPITAL_DOCTOR.HOSP_DOC_ID%TYPE 
) 
IS 
BEGIN 
  INSERT INTO HOSPITAL_DOCTOR (HOSP_ID, HOSP_DOC_ID) 
  VALUES (p_hosp_id, p_doc_id); 
  COMMIT; 
END; 
 
/

BEGIN 
  INSERT_HOSPITAL_DOCTOR(4, 1); 
  INSERT_HOSPITAL_DOCTOR(4, 2); 
  INSERT_HOSPITAL_DOCTOR(1, 3); 
  INSERT_HOSPITAL_DOCTOR(2, 4); 
  INSERT_HOSPITAL_DOCTOR(2, 5); 
  INSERT_HOSPITAL_DOCTOR(5, 6); 
  INSERT_HOSPITAL_DOCTOR(5, 7); 
  INSERT_HOSPITAL_DOCTOR(3, 8); 
  INSERT_HOSPITAL_DOCTOR(3, 9); 
  INSERT_HOSPITAL_DOCTOR(3, 10); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_APPOINTMENT_RECORD ( 
  APP_ID IN APPOINTMENT.APP_ID%TYPE, 
  APP_REASON IN APPOINTMENT.APP_REASON%TYPE, 
  APP_NO IN APPOINTMENT.APP_NO%TYPE, 
  APP_DATE IN APPOINTMENT.APP_DATE%TYPE 
) 
AS 
BEGIN 
  INSERT INTO APPOINTMENT VALUES (APP_ID, APP_REASON, APP_NO, APP_DATE); 
  COMMIT; 
END INSERT_APPOINTMENT_RECORD; 
 
/

BEGIN 
  INSERT_APPOINTMENT_RECORD(1, 'Regular checkup', 1, TO_DATE('2023-05-01', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(2, 'Fever',2, TO_DATE('2023-04-03', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(3, 'Back pain', 3, TO_DATE('2023-05-05', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(4, 'Headache', 4, TO_DATE('2023-04-06', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(5, 'Sore throat', 5, TO_DATE('2023-04-08', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(6, 'Chest pain', 6, TO_DATE('2023-04-09', 'YYYY-MM-DD')); 
  INSERT_APPOINTMENT_RECORD(7, 'Eye checkup', 7, TO_DATE('2023-04-10', 'YYYY-MM-DD')); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_PATIENT_RECORD ( 
  PAT_ID IN PATIENT.PAT_ID%TYPE, 
  PAT_NAME IN PATIENT.PAT_NAME%TYPE, 
  PAT_NO IN PATIENT.PAT_NO%TYPE, 
  PAT_ADD IN PATIENT.PAT_ADD%TYPE 
) 
AS 
BEGIN 
  INSERT INTO PATIENT VALUES (PAT_ID, PAT_NAME, PAT_NO, PAT_ADD); 
  COMMIT; 
END INSERT_PATIENT_RECORD; 
 
/

BEGIN 
  INSERT_PATIENT_RECORD(101, 'Alice Adams', 5551111, '123 Main St'); 
  INSERT_PATIENT_RECORD(102, 'Bob Brown', 5552222, '456 Oak St'); 
  INSERT_PATIENT_RECORD(103, 'Charlie Chen', 5553333, '789 Maple St'); 
  INSERT_PATIENT_RECORD(104, 'Diane Davis', 5554444, '321 Elm St'); 
  INSERT_PATIENT_RECORD(105, 'Emily Evans', 5555555, '654 Pine St'); 
  INSERT_PATIENT_RECORD(106, 'Frank Ford', 5556666, '987 Cedar St'); 
  INSERT_PATIENT_RECORD(107, 'George Green', 5557777, '543 Birch St'); 
  INSERT_PATIENT_RECORD(108, 'Helen Harris', 5558888, '876 Oak St'); 
  INSERT_PATIENT_RECORD(109, 'Irene Irwin', 5559999, '654 Elm St'); 
  INSERT_PATIENT_RECORD(110, 'John Johnson', 5550000, '321 Maple St'); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_APP_PAT_DOC ( 
  p_pat_id IN APP_PAT_DOC.PAT_ID%TYPE, 
  p_app_id IN APP_PAT_DOC.APP_ID%TYPE, 
  p_doc_id IN APP_PAT_DOC.DOC_ID%TYPE 
) 
IS 
BEGIN 
  INSERT INTO APP_PAT_DOC (PAT_ID, APP_ID, DOC_ID) 
  VALUES (p_pat_id, p_app_id, p_doc_id); 
  COMMIT; 
END; 
/

BEGIN 
  INSERT_APP_PAT_DOC(101, 1, 2); 
  INSERT_APP_PAT_DOC(102, 2, 2); 
  INSERT_APP_PAT_DOC(103, 3, 5); 
  INSERT_APP_PAT_DOC(104, 4, 2); 
  INSERT_APP_PAT_DOC(105, 5, 2); 
  INSERT_APP_PAT_DOC(106, 6, 1); 
  INSERT_APP_PAT_DOC(107, 7, 8); 
END; 
/

CREATE OR REPLACE PROCEDURE INSERT_RECEIPT_RECORD ( 
  REC_ID IN RECEIPT.REC_ID%TYPE, 
  REC_STATUS IN RECEIPT.REC_STATUS%TYPE 
) 
AS 
BEGIN 
  INSERT INTO RECEIPT VALUES (REC_ID, REC_STATUS); 
  COMMIT; 
END INSERT_RECEIPT_RECORD; 
/

EXECUTE INSERT_RECEIPT_RECORD(1,  'PAID')


EXECUTE INSERT_RECEIPT_RECORD(2,  'UNPAID')


EXECUTE INSERT_RECEIPT_RECORD(3,  'PAID')


EXECUTE INSERT_RECEIPT_RECORD(4,  'PAID')


EXECUTE INSERT_RECEIPT_RECORD(5,  'UNPAID')


EXECUTE INSERT_RECEIPT_RECORD(6,  'PAID')


EXECUTE INSERT_RECEIPT_RECORD(7,  'UNPAID')


CREATE OR REPLACE PROCEDURE INSERT_REC_PAT( 
  p_rec_id IN REC_PAT.REC_ID%TYPE, 
  p_pat_id IN REC_PAT.PAT_ID%TYPE 
) 
IS 
BEGIN 
  INSERT INTO REC_PAT (REC_ID, PAT_ID) 
  VALUES (p_rec_id, p_pat_id); 
  COMMIT; 
END; 
/

EXEC INSERT_REC_PAT(1, 101)


EXEC INSERT_REC_PAT(2, 102)


EXEC INSERT_REC_PAT(3, 103)


EXEC INSERT_REC_PAT(4, 104)


EXEC INSERT_REC_PAT(5, 105)


EXEC INSERT_REC_PAT(6, 106)


EXEC INSERT_REC_PAT(7, 107)


CREATE OR REPLACE PROCEDURE INSERT_PAYMENT_RECORD ( 
  PAY_ID IN PAYMENT.PAY_ID%TYPE, 
  PAT_METHOD IN PAYMENT.PAT_METHOD%TYPE, 
  PAY_AMOUNT IN PAYMENT.PAY_AMOUNT%TYPE, 
  PAY_DATE IN PAYMENT.PAY_DATE%TYPE 
) 
AS 
BEGIN 
  INSERT INTO PAYMENT VALUES (PAY_ID, PAT_METHOD, PAY_AMOUNT, PAY_DATE); 
  COMMIT; 
END INSERT_PAYMENT_RECORD; 
/

EXECUTE INSERT_PAYMENT_RECORD(1, 'CASH', 1000, '01-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(2, 'CARD', 500, '02-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(3, 'CASH', 750, '03-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(4, 'CARD', 1200, '04-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(5, 'CASH', 900, '05-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(6, 'CARD', 600, '06-APR-2023')


EXECUTE INSERT_PAYMENT_RECORD(7, 'CASH', 800, '07-APR-2023')


CREATE OR REPLACE PROCEDURE INSERT_PAY_REC( 
    PAY_ID_IN IN NUMBER, 
    REC_ID_IN IN NUMBER 
) 
AS 
BEGIN 
    INSERT INTO PAY_REC(PAY_ID, REC_ID) 
    VALUES(PAY_ID_IN, REC_ID_IN); 
END INSERT_PAY_REC; 
/

EXEC INSERT_PAY_REC(1, 1)


EXEC INSERT_PAY_REC(2, 2)


EXEC INSERT_PAY_REC(3, 3)


EXEC INSERT_PAY_REC(4, 4)


EXEC INSERT_PAY_REC(5, 5)


EXEC INSERT_PAY_REC(6, 6)


EXEC INSERT_PAY_REC(7, 7)


CREATE OR REPLACE FUNCTION count_appointments_made(APP_DOC_id IN APP_PAT_DOC.DOC_ID%TYPE) 
RETURN NUMBER 
IS 
  v_count NUMBER; 
BEGIN 
  SELECT COUNT(*) INTO v_count FROM APP_PAT_DOC WHERE DOC_ID = APP_DOC_id; 
  IF SQL%FOUND THEN 
       RETURN v_count; 
  END IF; 
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN 
  RETURN 0; 
END; 
/

declare  
y number:= 0; 
begin 
y := count_appointments_made(8); 
dbms_output.put_line('NO OF APPOINTMENT MADE FOR DOCTOR WITH ID '||y); 
end; 
/

CREATE OR REPLACE FUNCTION UPDATE_RECEIPT_STATUS(R_ID IN NUMBER) 
RETURN VARCHAR 
IS  
  Y VARCHAR(30); 
BEGIN 
  SELECT REC_STATUS INTO Y FROM RECEIPT WHERE REC_ID = R_ID; 
  IF Y = 'UNPAID' THEN 
    UPDATE RECEIPT SET  REC_STATUS = 'PAID' WHERE REC_ID = R_ID; 
    dbms_output.put_line('PAYMENT RECORD CHANGED TO PAID FOR RECEIPT ID '||R_ID); 
  ELSE  
    dbms_output.put_line('CHARGES ARE ALREADY PAID FOR RECEIPT ID '||R_ID); 
  END IF; 
  RETURN 'SUCCESS'; 
EXCEPTION  
  WHEN NO_DATA_FOUND THEN 
    RAISE_APPLICATION_ERROR(-20003,'ENTER VALID RECEIPT ID'); 
  RETURN 'ERROR'; 
END; 
/

DECLARE 
Y VARCHAR(30); 
BEGIN 
Y := UPDATE_RECEIPT_STATUS(10); 
END; 
/

CREATE OR REPLACE FUNCTION GET_DETAILS(P_ID IN NUMBER ) 
RETURN NUMBER 
IS  
BEGIN 
  FOR X IN ( 
    SELECT P.PAT_ID, P.PAT_NAME, A.APP_ID, A.DOC_ID, R.REC_ID, 
           R.REC_STATUS, PAY.PAY_ID, PAY.PAY_AMOUNT, PAY.PAY_DATE  
    FROM PATIENT P  
    INNER JOIN APP_PAT_DOC A ON P.PAT_ID = A.PAT_ID 
    INNER JOIN RECEIPT R ON R.REC_ID = (SELECT REC_ID FROM REC_PAT WHERE PAT_ID = P.PAT_ID) 
    INNER JOIN PAY_REC PR ON PR.REC_ID = R.REC_ID 
    INNER JOIN PAYMENT PAY ON PAY.PAY_ID = PR.PAY_ID 
    WHERE P.PAT_ID = P_ID 
  ) LOOP 
    DBMS_OUTPUT.PUT_LINE('PATIENT ID: ' || X.PAT_ID || ' PATIENT NAME: ' || X.PAT_NAME || ' APPOINTMENT ID: '  
                         || X.APP_ID || ' DOCTOR ID: ' || X.DOC_ID || ' RECEIPT ID: ' || X.REC_ID  
                         || ' RECEIPT STATUS: ' || X.REC_STATUS || ' PAYMENT ID: ' || X.PAY_ID  
                         || ' PAYMENT AMOUNT: ' || X.PAY_AMOUNT || ' PAYMENT DATE: ' || X.PAY_DATE); 
  END LOOP; 
  RETURN 1; 
END; 
/

DECLARE 
Y NUMBER; 
BEGIN 
Y := GET_DETAILS(101); 
END; 
/

CREATE OR REPLACE TRIGGER no_sunday_changes 
BEFORE INSERT OR UPDATE OR DELETE ON appointment 
FOR EACH ROW 
DECLARE 
  day_of_week VARCHAR2(10); 
BEGIN 
  SELECT TO_CHAR(SYSDATE, 'DAY') INTO day_of_week FROM dual; 
  IF day_of_week = 'SUNDAY' THEN 
    RAISE_APPLICATION_ERROR(-20001, 'No changes can be made on Sunday'); 
  END IF; 
END; 
/

CREATE OR REPLACE TRIGGER no_sunday_changes2 
BEFORE INSERT OR UPDATE OR DELETE ON receipt 
FOR EACH ROW 
DECLARE 
  day_of_week VARCHAR2(10); 
BEGIN 
  SELECT TO_CHAR(SYSDATE, 'DAY') INTO day_of_week FROM dual; 
  IF day_of_week = 'SUNDAY' THEN 
    RAISE_APPLICATION_ERROR(-20001, 'No changes can be made on Sunday'); 
  END IF; 
END; 
/

CREATE OR REPLACE TRIGGER no_sunday_changes3 
BEFORE INSERT OR UPDATE OR DELETE ON payment 
FOR EACH ROW 
DECLARE 
  day_of_week VARCHAR2(10); 
BEGIN 
  SELECT TO_CHAR(SYSDATE, 'DAY') INTO day_of_week FROM dual; 
  IF day_of_week = 'SUNDAY' THEN 
    RAISE_APPLICATION_ERROR(-20001, 'No changes can be made on Sunday'); 
  END IF; 
END; 
/

CREATE OR REPLACE TRIGGER appointment_limit 
BEFORE INSERT ON app_pat_doc 
FOR EACH ROW 
DECLARE 
  v_count NUMBER; 
BEGIN 
  SELECT COUNT(*) INTO v_count 
  FROM app_pat_doc 
  WHERE doc_id = :new.doc_id; 
  IF v_count >= 3 THEN 
    RAISE_APPLICATION_ERROR(-20001, 'Doctor already has three appointments on this day.'); 
  END IF; 
END; 
/

CREATE OR REPLACE TRIGGER update_payment_status 
AFTER UPDATE ON RECEIPT 
FOR EACH ROW 
BEGIN 
  IF :NEW.REC_STATUS = 'PAID' THEN 
   DBMS_OUTPUT.PUT_LINE('Payment Successful'); 
  END IF; 
END; 
/

